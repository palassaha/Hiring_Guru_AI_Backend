[
  {
    "Problem Statement": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8). Two binary trees are considered leaf-similar if their leaf value sequence is the same. Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.",
    "Title": "Leaf-Similar Trees",
    "test cases": [
      {
        "input": "[3,5,1,6,2,9,8,null,null,7,4] [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        "output": "true"
      },
      {
        "input": "[1,2,3] [1,3,2]",
        "output": "false"
      }
    ],
    "Boiler Plate": {
      "Python": "ZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVxdWUKCmNsYXNzIFRyZWVOb2RlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHgpOgogICAgICAgIHNlbGYudmFsID0geAogICAgICAgIHNlbGYubGVmdCA9IE5vbmUKICAgICAgICBzZWxmLnJpZ2h0ID0gTm9uZQoKZGVmIGxlYWZTaW1pbGFyKHJvb3QxLCByb290Mik6CiAgICBkZWYgZ2V0TGVhZlZhbHVlcyhyb290KToKICAgICAgICBpZiBub3Qgcm9vdDoKICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgcXVldWUgPSBkZXF1ZShbcm9vdF0pCiAgICAgICAgbGVhZl92YWx1ZXMgPSBbXQogICAgICAgIHdoaWxlIHF1ZXVlOgogICAgICAgICAgICBub2RlID0gcXVldWUucG9wbGVmdCgpCiAgICAgICAgICAgIGlmIG5vdCBub2RlLmxlZnQgYW5kIG5vdCBub2RlLnJpZ2h0OgogICAgICAgICAgICAgICAgbGVhZl92YWx1ZXMuYXBwZW5kKG5vZGUudmFsKQogICAgICAgICAgICBpZiBub2RlLmxlZnQ6CiAgICAgICAgICAgICAgICBxdWV1ZS5hcHBlbmQobm9kZS5sZWZ0KQogICAgICAgICAgICBpZiBub2RlLnJpZ2h0OgogICAgICAgICAgICAgICAgcXVldWUuYXBwZW5kKG5vZGUucmlnaHQpCiAgICAgICAgcmV0dXJuIGxlYWZfdmFsdWVzCgogICAgcmV0dXJuIGdldExlYWZWYWx1ZXMocm9vdDEpID09IGdldExlYWZWYWx1ZXMocm9vdDIp",
      "Java": "aW1wb3J0IGphdmEudXRpbC4qOwoKcHVibGljIGNsYXNzIE1haW4gewogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgewogICAgICAgIC8vIFRPRE86IEltcGxlbWVudCB0aGUgbGVhZlNpbWlsYXIgZnVuY3Rpb24KICAgICAgICAvLyBsZWFmU2ltaWxhciBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRydWUgaWYgdHdvIHRyZWVzIGFyZSBsZWFmLXNpbWlsYXIsIGZhbHNlIG90aGVyd2lzZQogICAgfQoKICAgIHB1YmxpYyBzdGF0aWMgYm9vbGVhbiBsZWFmU2ltaWxhcihUcmVlTm9kZSByb290MSwgVHJlZU5vZGUgcm9vdDIpIHsKICAgICAgICBMaXN0PEludGVnZXI+IGxlYXZlczEgPSBnZXRMZWFmVmFsdWVzKHJvb3QxKTsKICAgICAgICBMaXN0PEludGVnZXI+IGxlYXZlczIgPSBnZXRMZWFmVmFsdWVzKHJvb3QyKTsKICAgICAgICByZXR1cm4gbGVhdmVzMS5lcXVhbHMobGVhdmVzMik7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBMaXN0PEludGVnZXI+IGdldExlYWZWYWx1ZXMoVHJlZU5vZGUgcm9vdCkgewogICAgICAgIExpc3Q8SW50ZWdlcj4gbGVhdmVzID0gbmV3IEFycmF5TGlzdDw+KCk7CiAgICAgICAgZGZzKHJvb3QsIGxlYXZlcyk7CiAgICAgICAgcmV0dXJuIGxlYXZlczsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgZGZzKFRyZWVOb2RlIG5vZGUsIExpc3Q8SW50ZWdlcj4gbGVhdmVzKSB7CiAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmIChub2RlLmxlZnQgPT0gbnVsbCAmJiBub2RlLnJpZ2h0ID09IG51bGwpIHsKICAgICAgICAgICAgbGVhdmVzLmFkZChub2RlLnZhbCk7CiAgICAgICAgfQogICAgICAgIGRmcyhub2RlLmxlZnQsIGxlYXZlcyk7CiAgICAgICAgZGZzKG5vZGUucmlnaHQsIGxlYXZlcyk7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBjbGFzcyBUcmVlTm9kZSB7CiAgICAgICAgaW50IHZhbDsKICAgICAgICBUcmVlTm9kZSBsZWZ0OwogICAgICAgIFRyZWVOb2RlIHJpZ2h0OwogICAgICAgIFRyZWVOb2RlKGludCB4KSB7IHZhbCA9IHg7IH0KICAgIH0KfQ==",
      "C++": "I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8dmVjdG9yPgojaW5jbHVkZSA8cXVldWU+CiNpbmNsdWRlIDxzdHJpbmc+Cgp1c2luZyBuYW1lc3BhY2Ugc3RkOwoKc3RydWN0IFRyZWVOb2RlIHsKICAgIGludCB2YWw7CiAgICBUcmVlTm9kZSAqbGVmdDsKICAgIFRyZWVOb2RlICpyaWdodDsKICAgIFRyZWVOb2RlKGludCB4KSA6IHZhbCh4KSwgbGVmdChOVUxMKSwgcmlnaHQoTlVMTCkge30KfTsKCmNsYXNzIFNvbHV0aW9uIHsKcHVibGljOgogICAgYm9vbCBsZWFmU2ltaWxhcihUcmVlTm9kZSogcm9vdDEsIFRyZWVOb2RlKiByb290MikgewogICAgICAgIC8vIFRPRE86IGltcGxlbWVudCBsZWFmU2ltaWxhciBmdW5jdGlvbgogICAgfQp9OwoKaW50IG1haW4oKSB7CiAgICBzdHJpbmcgaW5wdXQ7CiAgICB3aGlsZSAoZ2V0bGluZShjaW4sIGlucHV0KSkgewogICAgICAgIGlmIChpbnB1dC5lbXB0eSgpKSBicmVhazsKICAgICAgICAvLyBwYXJzZSBpbnB1dCBpbnRvIFRyZWVOb2RlIG9iamVjdHMKICAgICAgICAvLyAuLi4KICAgIH0KCiAgICBTb2x1dGlvbiBzb2x1dGlvbjsKICAgIGJvb2wgcmVzdWx0ID0gc29sdXRpb24ubGVhZlNpbWlsYXIocm9vdDEsIHJvb3QyKTsKICAgIGNvdXQgPDwgcmVzdWx0IDw8IGVuZGw7CgogICAgcmV0dXJuIDA7Cn0KCi8vIEFsdGVybmF0aXZlIGltcGxlbWVudGF0aW9uIHVzaW5nIHF1ZXVlCiNpbmNsdWRlIDxxdWV1ZT4KCmNsYXNzIFNvbHV0aW9uIHsKcHVibGljOgogICAgYm9vbCBsZWFmU2ltaWxhcihUcmVlTm9kZSogcm9vdDEsIFRyZWVOb2RlKiByb290MikgewogICAgICAgIHZlY3RvcjxpbnQ+IGxlYXZlczEsIGxlYXZlczI7CiAgICAgICAgcXVldWU8VHJlZU5vZGUqPiBxMSwgcTI7CgogICAgICAgIHExLnB1c2gocm9vdDEpOwogICAgICAgIHEyLnB1c2gocm9vdDIpOwoKICAgICAgICB3aGlsZSAoIXExLmVtcHR5KCkgfHwgIXEyLmVtcHR5KCkpIHsKICAgICAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50IGxlYWZTaW1pbGFyIGZ1bmN0aW9uCiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbGVhdmVzMSA9PSBsZWF2ZXMyOwogICAgfQp9Ow=="
    }
  },
  {
    "Problem Statement": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
    "Title": "Find All Numbers Disappeared in an Array",
    "test cases": [
      {
        "input": "[4,3,2,7,8,2,3,1]",
        "output": "[5,6]"
      },
      {
        "input": "[1,1]",
        "output": "[2]"
      }
    ],
    "Boiler Plate": {
      "Python": "ZGVmIGZpbmREaXNhcHBlYXJlZE51bWJlcnMobnVtcyk6CiAgICBuID0gbGVuKG51bXMpCiAgICAjIFlvdXIgY29kZSBoZXJlCiAgICByZXR1cm4gW10KCmRlZiBtYWluKCk6CiAgICAjIFJlYWQgaW5wdXQgZnJvbSBzdGRpbgogICAgbnVtcyA9IGxpc3QobWFwKGludCwgaW5wdXQoKS5zcGxpdCgpKSkKCiAgICAjIENhbGwgdGhlIGZ1bmN0aW9uCiAgICByZXN1bHQgPSBmaW5kRGlzYXBwZWFyZWROdW1iZXJzKG51bXMpCgogICAgIyBQcmludCBvdXRwdXQgdG8gc3Rkb3V0CiAgICBwcmludChyZXN1bHQpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigp",
      "Java": "aW1wb3J0IGphdmEudXRpbC5TY2FubmVyOwoKcHVibGljIGNsYXNzIE1haW4gewogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgewogICAgICAgIFNjYW5uZXIgc2Nhbm5lciA9IG5ldyBTY2FubmVyKFN5c3RlbS5pbik7CiAgICAgICAgaW50IG4gPSBzY2FubmVyLm5leHRJbnQoKTsKICAgICAgICBpbnRbXSBudW1zID0gbmV3IGludFtuXTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBudW1zW2ldID0gc2Nhbm5lci5uZXh0SW50KCk7CiAgICAgICAgfQogICAgICAgIHNjYW5uZXIuY2xvc2UoKTsKCiAgICAgICAgaW50W10gcmVzdWx0ID0gZmluZERpc2FwcGVhcmVkTnVtYmVycyhudW1zKTsKICAgICAgICBmb3IgKGludCBudW0gOiByZXN1bHQpIHsKICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludChudW0gKyAiICIpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIGludFtdIGZpbmREaXNhcHBlYXJlZE51bWJlcnMoaW50W10gbnVtcykgewogICAgICAgIGludCBuID0gbnVtcy5sZW5ndGg7CiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgd2hpbGUgKDEgPD0gbnVtc1tpXSAmJiBudW1zW2ldIDw9IG4gJiYgbnVtc1tudW1zW2ldIC0gMV0gIT0gbnVtc1tpXSkgewogICAgICAgICAgICAgICAgc3dhcChudW1zLCBpLCBudW1zW2ldIC0gMSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW50W10gcmVzdWx0ID0gbmV3IGludFtuXTsKICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBpZiAobnVtc1tpXSAhPSBpICsgMSkgewogICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gaSArIDE7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgc3dhcChpbnRbXSBudW1zLCBpbnQgaSwgaW50IGopIHsKICAgICAgICBpbnQgdGVtcCA9IG51bXNbaV07CiAgICAgICAgbnVtc1tpXSA9IG51bXNbal07CiAgICAgICAgbnVtc1tqXSA9IHRlbXA7CiAgICB9Cn0=",
      "C++": "I2luY2x1ZGUgPGlvc3RyZWFtPgojaW5jbHVkZSA8dmVjdG9yPgoKdm9pZCBmaW5kRGlzYXBwZWFyZWROdW1iZXJzKHN0ZDo6dmVjdG9yPGludD4mIG51bXMpIHsKICAgIGludCBuID0gbnVtcy5zaXplKCk7CiAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgIHdoaWxlICgxIDw9IG51bXNbaV0gJiYgbnVtc1tpXSA8PSBuICYmIG51bXNbbnVtc1tpXSAtIDFdICE9IG51bXNbaV0pIHsKICAgICAgICAgICAgc3RkOjpzd2FwKG51bXNbbnVtc1tpXSAtIDFdLCBudW1zW2ldKTsKICAgICAgICB9CiAgICB9CiAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgewogICAgICAgIGlmIChpICsgMSAhPSBudW1zW2ldKSB7CiAgICAgICAgICAgIHN0ZDo6Y291dCA8PCBpICsgMSA8PCAiICI7CiAgICAgICAgfQogICAgfQp9CgppbnQgbWFpbigpIHsKICAgIHN0ZDo6dmVjdG9yPGludD4gbnVtcyA9IHs0LDMsMiw3LDgsMiwzLDF9OwogICAgZmluZERpc2FwcGVhcmVkTnVtYmVycyhudW1zKTsKICAgIHJldHVybiAwOwp9"
    }
  }
]