[
  {
    "question_id": "904",
    "frontend_id": "872",
    "title": "Leaf-Similar Trees",
    "title_slug": "leaf-similar-trees",
    "difficulty": "Easy",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Binary Tree"
    ],
    "problem_statement": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8). Two binary trees are considered leaf-similar if their leaf value sequence is the same. Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.",
    "examples": [
      {
        "example_number": 1,
        "input": "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
        "output": "true",
        "explanation": ""
      },
      {
        "example_number": 2,
        "input": "root1 = [1,2,3], root2 = [1,3,2]",
        "output": "false",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in each tree will be in the range [1, 200]. Both of the given trees will have values in the range [0, 200]."
    ],
    "input_format": "root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]",
    "output_format": "true"
  },
  {
    "question_id": "448",
    "frontend_id": "448",
    "title": "Find All Numbers Disappeared in an Array",
    "title_slug": "find-all-numbers-disappeared-in-an-array",
    "difficulty": "Easy",
    "topics": [
      "Array",
      "Hash Table"
    ],
    "problem_statement": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",
    "examples": [
      {
        "example_number": 1,
        "input": "nums = [4,3,2,7,8,2,3,1]",
        "output": "[5,6]",
        "explanation": ""
      },
      {
        "example_number": 2,
        "input": "nums = [1,1]",
        "output": "[2]",
        "explanation": ""
      }
    ],
    "constraints": [
      "n == nums.length 1 <= n <= 105 1 <= nums[i] <= n"
    ],
    "input_format": "nums = [4,3,2,7,8,2,3,1]",
    "output_format": "[5,6]"
  },
  {
    "question_id": "650",
    "frontend_id": "650",
    "title": "2 Keys Keyboard",
    "title_slug": "2-keys-keyboard",
    "difficulty": "Medium",
    "topics": [
      "Math",
      "Dynamic Programming"
    ],
    "problem_statement": "There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step: Copy All: You can copy all the characters present on the screen (a partial copy is not allowed). Paste: You can paste the characters which are copied last time. Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.",
    "examples": [
      {
        "example_number": 1,
        "input": "n = 3",
        "output": "3",
        "explanation": "Initially, we have one character 'A'. In step 1, we use Copy All operation. In step 2, we use Paste operation to get 'AA'. In step 3, we use Paste operation to get 'AAA'."
      },
      {
        "example_number": 2,
        "input": "n = 1",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "1 <= n <= 1000"
    ],
    "input_format": "n = 3",
    "output_format": "3 Explanation: Initially, we have one character 'A'. In step 1, we use Copy All operation. In step 2, we use Paste operation to get 'AA'. In step 3, we use Paste operation to get 'AAA'."
  },
  {
    "question_id": "1243",
    "frontend_id": "1315",
    "title": "Sum of Nodes with Even-Valued Grandparent",
    "title_slug": "sum-of-nodes-with-even-valued-grandparent",
    "difficulty": "Medium",
    "topics": [
      "Tree",
      "Depth-First Search",
      "Breadth-First Search",
      "Binary Tree"
    ],
    "problem_statement": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0. A grandparent of a node is the parent of its parent if it exists.",
    "examples": [
      {
        "example_number": 1,
        "input": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
        "output": "18",
        "explanation": "The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
      },
      {
        "example_number": 2,
        "input": "root = [1]",
        "output": "0",
        "explanation": ""
      }
    ],
    "constraints": [
      "The number of nodes in the tree is in the range [1, 104]. 1 <= Node.val <= 100"
    ],
    "input_format": "root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]",
    "output_format": "18 Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."
  },
  {
    "question_id": "1875",
    "frontend_id": "1766",
    "title": "Tree of Coprimes",
    "title_slug": "tree-of-coprimes",
    "difficulty": "Hard",
    "topics": [
      "Array",
      "Math",
      "Tree",
      "Depth-First Search",
      "Number Theory"
    ],
    "problem_statement": "There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0. To represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree. Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y. An ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself. Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.",
    "examples": [
      {
        "example_number": 1,
        "input": "nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]",
        "output": "[-1,0,0,1]",
        "explanation": "In the above figure, each node's value is in parentheses. - Node 0 has no coprime ancestors. - Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1). - Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor. - Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its closest valid ancestor."
      },
      {
        "example_number": 2,
        "input": "nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]",
        "output": "[-1,0,-1,0,0,0,-1]",
        "explanation": ""
      }
    ],
    "constraints": [
      "nums.length == n 1 <= nums[i] <= 50 1 <= n <= 105 edges.length == n - 1 edges[j].length == 2 0 <= uj, vj < n uj != vj"
    ],
    "input_format": "nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]",
    "output_format": "[-1,0,0,1] Explanation: In the above figure, each node's value is in parentheses. - Node 0 has no coprime ancestors. - Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1). - Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor. - Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its closest valid ancestor."
  }
]